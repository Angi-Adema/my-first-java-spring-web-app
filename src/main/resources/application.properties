spring.application.name=myfirstwebapp

#Anything you want to change about the application you can configure in here. Like the new port below.
#server.port=8081

# /src/main/resources/META-INF/resources/WEB-INF/jsp/sayHello.jsp

#Whenever you get a request for the view, use this as the prefix and suffix. Luckily Spring already knows the prefix up to /WEB-INF so we can delete the whole first part up to this.
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

#How does login map to a specific JSP? It maps to the JSP name via the configuration here through a View Resolver. Dispatcher talks to the servlet and gets the exact view name.
# /WEB-INF/jsp/login.jsp => View Resolver

#Because getting an error, learn more about your error by configuring the log. org.springframework is the name of the package and any class in this package will log at the level set.
logging.level.org.springframework=info

#Can set logging levels for different packages.
logging.level.com.in28minutes.springboot.myfirstwebapp=info

# Set a format for the date in the TODOs list:
spring.mvc.format.date=MM-dd-yyyy

# Make the h2 URL a constant, configure here to keep it constant rather than the server resetting it each time we open the project.
spring.datasource.url=jdbc:h2:mem:testdb

# By default, data.sql is executed before the entities are processed so it will throw an error. Tables are created when the entities are processed. We can change this here:
spring.jpa.defer-datasource-initialization=true

# How do we find out what is happening behind the scenes with todoRepository and what it is actually doing? Enable application.properties and see all queries generated when save and server restarts. 
# To debug and see specific queries as we add, update and delete within the browser of our application.
# spring.jpa.show-sql=true